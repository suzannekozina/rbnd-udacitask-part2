# What you added to Udacitask 2.0
# -------------------------------------------------------
1. What is the gem of your choice and how did you use it?
  I added the gem 'terminal-table' because I can relate to its features. I work 
  with research associates and data scientists who like to analyze data in 
  tables. I wanted to tryout this gem because I might be able to put it to use 
  at my current job
  
2. Describe the 2 features you added to the project.
  a) Feature 1 - I added a DateTime stamp to each list
  b) Feature 2 - I had some formatting fun with the 'artii' gem. 
  c) Feature 3 - I wrote the terminal-tables to a text file. 
  
# REFLECTIONS
# -------------------------------------------------------
1. How long did you spend working on this project?
  I spent 6 hours working on the code. I spent several hours researching, and 
  listening to Ruby Rogues podcasts (such as "BookClub with Sandi Metz" and 
  "Therapeutic Refactoring"). With this project I enjoyed exploring different 
  gems and diving deeper into Object Oriented Programing.
  
2. What was the most rewarding challenge you conquered?
  Getting the item-type filter to work was by far the biggest challenge. Once I
  finally got it working I felt like I came out of a boxing match with my code -
  badly battered but deliriously satisfied.
  
3. What two additional features did you build? Why?
  Features 1 & 2) I added a DateTime formatted stamp right above each list as 
  practical formatting. I also formatted the list titles in ascii art - just to 
  inject a little fun into the user experience.
  Feature 3) Most of my co-workers and supervisors aren't super comfortable 
  using a command terminal. I realized that if I want to use the 'terminal-table' 
  gem at work I would need a way to print out the tables to a report. Since 
  there are so many different ways to do things in ruby, I decided to take a 
  different approach to printing the report than was used in ToyCity2. My 
  solution was to use $stdout to write the console output into a text file. 

4. Where do you still have room to grow?
  EVERYWHERE and specifically...
  Where I could still improve this particular project is, I would like to print 
  color to the console AND the report file. Currently the colorize gem only 
  prints color to the console. 
  In general, I would really like to learn best practices in how to rescue and 
  log errors. As a data/content manager I've worked with a content management 
  system that had terrible error-handling and..it was kind of traumatic for 
  everyone involved.  I recent found "Exceptional Ruby" by Avdi Grim, but I have 
  yet to read it. My goal in reading it would be to learn how to write an 
  advanced error API that is both developer-friendly and data-manager-friendly. 
  